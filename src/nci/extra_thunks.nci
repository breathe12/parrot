# Copyright (C) 2002-2015, Parrot Foundation.

# Function signature declarations for Parrot Native Call Interface.
# This file contains the Parrot Native Call Interface signature
# declarations required by Parrot's extensions --without-libffi.

# The first alphanumeric is the type of the return value,
# the other alphanumerics denote the input parameter types.

# Types

# INT register types
# I - INTVAL
# c - char
# s - short
# i - int
# l - long

# NUM register types
# N - FLOATVAL
# f - float
# d - double

# STR register types
# S - pointer to a STRING-register
# t - pointer to a cstring

# PMC register stuff
# P - pointer to a PMC-register
# p - data pointer from PMC (on store into a new UnManagedStruct PMC)
# 2 - short pointer to a boxed Integer value
# 3 - int pointer to a boxed Integer value
# 4 - long pointer to a boxed Integer value

# void types
# v - void

# callback types
# U - Single PMC parameter to pass into callback - user data

# Signatures

# mod_parrot
i    ip
i    p
v    p
v    ppp

v
v    i
v    ii
v    illllllll
v    l
v    p
v    pi
v    piiii
v    pl
v    pp

i    P

# Added for TclLibrary
i    ppd
i    pipi
p    ppi
p    pppi
p    ppppi

i          # void function returning int like fork()

# win32
l     lppl
i     pip
i     piS
S     i

# --- start mysqlclient library ---
#
# Created from mysql.h using the following manual method:
#
# Edited copy of mysql.h using vi by doing g/, *$/j (repeat) then g/\* *$/j
# (repeat) to get all functions on one line each.
#
# Extracted list of api func names from
# http://dev.mysql.com/doc/refman/4.1/en/c-api-functions.html and copied to a
# temporary file to clean up (mysql_api_names.txt)
#
# Stripped down to bare names and merged into one line separated by |
# then egrep -w `cat mysql_api_names.txt` mysql.h > mysql_api.ncidef
# then edit mysql_api.ncidef in vi: %s/^/   #  /
# to create space for nci signatures and to use original definition as a #
# comment.
#
# This method isn't ideal, I'm just noting it here in case it helps others.
# Ideally the process should be automated - but there be many dragons along
# that path.
#
# NCI doesn't yet handle long long values (my_ulonglong), spec'd as long for now
#
#
#    MYSQL_FIELD and MYSQL_RES are structs
#    typedef char **MYSQL_ROW;           /* return data as array of strings */
#    typedef unsigned int MYSQL_FIELD_OFFSET; /* offset to current field */
#    typedef MYSQL_ROWS *MYSQL_ROW_OFFSET;   /* offset to current row */
#
l    p    #! my_ulonglong mysql_num_rows(MYSQL_RES *res)
i    p    #  unsigned int mysql_num_fields(MYSQL_RES *res)
c    p    #  my_bool mysql_eof(MYSQL_RES *res)
c    pppp # my_bool mysql_change_user(MYSQL *mysql, const char *user,
# const char *passwd, const char *db)
p    pi   #  MYSQL_FIELD *mysql_fetch_field_direct(MYSQL_RES *res,
#               unsigned int fieldnr)
p    p    #  MYSQL_FIELD * mysql_fetch_fields(MYSQL_RES *res)
p    p    #  MYSQL_ROW_OFFSET mysql_row_tell(MYSQL_RES *res)
i    p    #  MYSQL_FIELD_OFFSET mysql_field_tell(MYSQL_RES *res)
i    p    #  unsigned int mysql_field_count(MYSQL *mysql)
l    p    #! my_ulonglong mysql_affected_rows(MYSQL *mysql)
l    p    #! my_ulonglong mysql_insert_id(MYSQL *mysql)
i    p    #  unsigned int mysql_errno(MYSQL *mysql)
l    p    #  unsigned long mysql_thread_id(MYSQL *mysql)
p    p    #  MYSQL * mysql_init(MYSQL *mysql)
i    pppppp # int mysql_ssl_set(MYSQL *mysql, const char *key,
# const char *cert, const char *ca, const char *capath,
# const char *cipher)

l    ppl   #  unsigned long mysql_escape_string(char *to,const char *from, unsigned long from_length)
l    pppl  #  unsigned long mysql_real_escape_string(MYSQL *mysql, char *to,const char *from, unsigned long length)
v    p     #  void mysql_close(MYSQL *sock)
i    p     #  int mysql_shutdown(MYSQL *mysql)
i    p     #  int mysql_dump_debug_info(MYSQL *mysql)
i    pi    #  int mysql_refresh(MYSQL *mysql, unsigned int refresh_options)
i    pl    #  int mysql_kill(MYSQL *mysql,unsigned long pid)
i    p     #  int mysql_ping(MYSQL *mysql)
l          #  unsigned long mysql_get_client_version(void)
p    p     #  MYSQL_RES * mysql_list_processes(MYSQL *mysql)
p    p     #  MYSQL_RES * mysql_store_result(MYSQL *mysql)
p    p     #  MYSQL_RES * mysql_use_result(MYSQL *mysql)
v    p     #  void mysql_free_result(MYSQL_RES *result)
v    pl    #  void mysql_data_seek(MYSQL_RES *result, my_ulonglong offset)
p    pp    #  MYSQL_ROW_OFFSET mysql_row_seek(MYSQL_RES *result,
#                                             MYSQL_ROW_OFFSET offset)
i    pi    #  MYSQL_FIELD_OFFSET mysql_field_seek(MYSQL_RES *result,
#                                                 MYSQL_FIELD_OFFSET offset)

p    p     #  MYSQL_ROW mysql_fetch_row(MYSQL_RES *result)
l    p     #  unsigned long * mysql_fetch_lengths(MYSQL_RES *result)
p    p     #  MYSQL_FIELD * mysql_fetch_field(MYSQL_RES *result)

ptr (ptr, ptr, ptr, ptr, ptr, int, ptr, int) # mysql_real_connect
# --- end mysqlclient library ---

# Oddball ones for postgres
p    ppP         # PQsetNoticeReceiver
p    ppipppi     # PQexecPrepared
p    ppippppi    # PQexecParams
p    pppip       # PQprepage

# Used by SDL
# perl -alne'if (/dlfunc/) {print substr($F[4],1,1),"    ",substr($F[4],2,-1)}'  runtime/parrot/library/SDL.pir | sort -u > SDL.nci
i
i    p
i    pii
i    ppi
i    pppp
#i    pt33
i    v
p    iiiiiiii
p    iiil
p    p
p    pi
p    pti
p    ptii
p    t
p    ti
t    i
t    v
v
v    p
v    piiii
v    pip
v    v

# used by pcre
i    ppiipi

# Testing xlib

p    ppiii
p    ppiiiiiii
i    ppii
i    ppiii
i    ppiiii
i    ppiiiii
i    ppiiiiii
i    pppi
i    pppii
i    pppiiii
i    ppppiiiiii

# Testing OpenGL
v    fff

# Testing SQLite
i    pid
i    pipii

# PCRE
p    pS
ptr  (ptr, int, ptr&, int&, ptr)
int  (ptr, ptr, ptr,  int,  int, int, ptr, int)

# ncurses
# perl -alne'if (/dlfunc/) {print substr($F[4],1,1),"    ",substr($F[4],2,-1)}'  runtime/parrot/library/Curses.pir | sort -u > ncurses.nci
c
i
#i    4
#i    42p
#i    4i
i    i
i    ii
#i    ii4
#i    ii4i
i    iiii
i    iiilsp
i    iil
i    iili
i    iip
i    iit
i    iiti
i    ilsp
i    iti
i    l
i    li
i    lp
i    lsp
i    p
#i    p33
#i    p333
#i    p333333
#i    p4
#i    p42p
#i    p4i
i    pi
i    pii
#i    pii4
#i    pii4i
i    piii
i    piiiiii
i    piiilsp
i    piil
i    piili
i    piit
i    piiti
i    pilsp
i    pit
i    pl
i    pli
i    pll
i    pllllllll
i    plp
i    plsp
i    pp
i    ppiiiiiiii
i    psp
i    pt
i    pti
i    s
#i    s22
#i    s222
i    sp
i    sss
i    ssss
i    t
i    ti
l
#l    33l
l    ii
#l    l4
l    p
#l    p33l
l    pi
l    pii
p
p    ii
p    iiii
p    iiiiii
p    p
p    pii
p    piiii
p    t
p    tpp
s    i
t
t    i
t    ii
t    pi
t    t
v
v    i
v    illllllll
v    l
v    p
v    pi
v    pl

# tools/dev/nci_thunk_gen.pir
PMC    (ptr, STRING)
INTVAL (ptr, STRING)
STRING (ptr, INTVAL)

# NCI::Utils
STRING (ptr, ptr, INTVAL)

# examples/nci/Qt
p    v
p    p
v    pii
v    p
